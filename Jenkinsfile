pipeline {
    agent any

    environment {
        DATA_PATH = "data/"
        MODEL_PATH = "models/"
    }

    stages {
        stage('Cloner le code') {
            steps {
                git branch: 'main', url: 'https://github.com/yassindoghriii/MLOPS.git'
            }
        }

        
        stage('Installer les d√©pendances') {
            steps {
                sh 'python3 -m pip install --no-cache-dir -r requirements.txt'
            }
        }

        stage('Pr√©traitement des donn√©es avec Docker') {
            steps {
                sh '''
                echo "üöÄ Construction de l'image Docker..."
                docker build -t mlops-preprocessing . || { echo "‚ö†Ô∏è Erreur lors du build Docker"; exit 1; }

                echo "‚ö° Ex√©cution du conteneur de pr√©traitement..."
                docker run --rm -v $PWD/data:/app/data mlops-preprocessing || { echo "‚ö†Ô∏è Erreur lors de l'ex√©cution Docker"; exit 1; }
                '''
            }
        }

        stage('Entra√Ænement du mod√®le') {
            steps {
                sh '''
                echo "üöÄ D√©but de l'entra√Ænement du mod√®le..."
                python3 train.py || { echo "‚ùå Erreur lors de l'entra√Ænement"; exit 1; }
                '''
            }
        }

        stage('√âvaluation du mod√®le') {
            steps {
                sh '''
                echo "üìä √âvaluation des performances du mod√®le..."
                python3 evaluate.py || { echo "‚ùå Erreur lors de l'√©valuation"; exit 1; }
                '''
            }
        }

        stage('Stockage des artefacts') {
            steps {
                archiveArtifacts artifacts: 'rf_model.pkl, dt_model.pkl, ann_model.pkl', fingerprint: true
            }
        }
    }

    post {
        success {
            echo "üéâ Pipeline termin√© avec succ√®s ! ‚úÖ"
        }
        failure {
            echo "üö® Le pipeline a √©chou√© ! V√©rifie les logs Jenkins."
        }
    }
}
