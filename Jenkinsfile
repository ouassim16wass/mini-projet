pipeline {
    agent any

    environment {
        DATA_PATH = "data/"
        MODEL_PATH = "models/"
    }

    stages {
        // Cloner le code depuis le repository Git
        stage('Cloner le code') {
            steps {
                echo "üöÄ Clonage du repository..."
                git branch: 'main', url: 'https://github.com/ouassim16wass/mini-projet.git'
            }
        }

        // Installer les d√©pendances n√©cessaires √† partir du fichier requirements.txt
        stage('Installer les d√©pendances') {
            steps {
                echo "üîß Installation des d√©pendances..."
                bat 'python -m pip install --no-cache-dir -r requirements.txt'
            }
        }

        // Pr√©traiter les donn√©es (si applicable)
        stage('Pr√©traitement des donn√©es') {
            steps {
                echo "üßπ D√©but du pr√©traitement des donn√©es..."
                bat '''
                python preprocess.py || { echo " Erreur lors du pr√©traitement"; exit 1; }
                '''
            }
        }

        // Entra√Ænement du mod√®le
        stage('Entra√Ænement du mod√®le') {
            steps {
                echo "D√©but de l'entra√Ænement du mod√®le..."
                bat '''
                chcp 65001  // Permet d'assurer la gestion correcte des caract√®res
                python train.py || { echo " Erreur lors de l'entra√Ænement"; exit 1; }
                '''
            }
        }

        // √âvaluation du mod√®le
        stage('√âvaluation du mod√®le') {
            steps {
                echo " √âvaluation des performances du mod√®le..."
                bat '''
                chcp 65001  // Permet d'assurer la gestion correcte des caract√®res
                python evaluate.py || { echo " Erreur lors de l'√©valuation"; exit 1; }
                '''
            }
        }

        // Stockage des artefacts (mod√®le entra√Æn√©, etc.)
        stage('Stockage des artefacts') {
            steps {
                echo "üì¶ Stockage des artefacts..."
                archiveArtifacts artifacts: 'models/*.pkl', fingerprint: true
            }
        }
    }

    post {
        success {
            echo "üéâ Pipeline termin√© avec succ√®s ! ‚úÖ"
        }
        failure {
            echo "üö® Le pipeline a √©chou√© ! V√©rifie les logs Jenkins pour plus de d√©tails."
        }
    }
}
